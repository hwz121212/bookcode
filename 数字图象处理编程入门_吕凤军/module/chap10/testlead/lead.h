#if !defined(AFX_LEAD_H__BA0EE530_E514_11D1_A2B6_0000B4810C13__INCLUDED_)
#define AFX_LEAD_H__BA0EE530_E514_11D1_A2B6_0000B4810C13__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CPicture;

/////////////////////////////////////////////////////////////////////////////
// CLead wrapper class

class CLead : public CWnd
{
protected:
	DECLARE_DYNCREATE(CLead)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x19332100, 0x5738, 0x11cf, { 0x9c, 0x69, 0x0, 0x20, 0xaf, 0x26, 0xf0, 0xcb } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	short GetBorderStyle();
	void SetBorderStyle(short);
	long GetBitmap();
	void SetBitmap(long);
	BOOL GetAutoRepaint();
	void SetAutoRepaint(BOOL);
	BOOL GetBackErase();
	void SetBackErase(BOOL);
	BOOL GetAutoScroll();
	void SetAutoScroll(BOOL);
	short GetPaintDither();
	void SetPaintDither(short);
	float GetBitmapWidth();
	void SetBitmapWidth(float);
	float GetBitmapHeight();
	void SetBitmapHeight(float);
	short GetBitmapBits();
	void SetBitmapBits(short);
	short GetVersionLevel();
	void SetVersionLevel(short);
	short GetVersionMajor();
	void SetVersionMajor(short);
	short GetVersionMinor();
	void SetVersionMinor(short);
	CString GetVersionProduct();
	void SetVersionProduct(LPCTSTR);
	CString GetVersionDate();
	void SetVersionDate(LPCTSTR);
	CString GetVersionTime();
	void SetVersionTime(LPCTSTR);
	short GetPaintPalette();
	void SetPaintPalette(short);
	BOOL GetEnableMethodErrors();
	void SetEnableMethodErrors(BOOL);
	float GetDstLeft();
	void SetDstLeft(float);
	float GetDstTop();
	void SetDstTop(float);
	float GetDstWidth();
	void SetDstWidth(float);
	float GetDstHeight();
	void SetDstHeight(float);
	float GetDstClipLeft();
	void SetDstClipLeft(float);
	float GetDstClipTop();
	void SetDstClipTop(float);
	float GetDstClipWidth();
	void SetDstClipWidth(float);
	float GetDstClipHeight();
	void SetDstClipHeight(float);
	float GetSrcLeft();
	void SetSrcLeft(float);
	float GetSrcTop();
	void SetSrcTop(float);
	float GetSrcWidth();
	void SetSrcWidth(float);
	float GetSrcHeight();
	void SetSrcHeight(float);
	float GetSrcClipLeft();
	void SetSrcClipLeft(float);
	float GetSrcClipTop();
	void SetSrcClipTop(float);
	float GetSrcClipWidth();
	void SetSrcClipWidth(float);
	float GetSrcClipHeight();
	void SetSrcClipHeight(float);
	short GetBitmapXRes();
	void SetBitmapXRes(short);
	short GetBitmapYRes();
	void SetBitmapYRes(short);
	short GetInfoPage();
	void SetInfoPage(short);
	float GetInfoWidth();
	void SetInfoWidth(float);
	float GetInfoHeight();
	void SetInfoHeight(float);
	short GetInfoBits();
	void SetInfoBits(short);
	short GetInfoFormat();
	void SetInfoFormat(short);
	long GetInfoSizeDisk();
	void SetInfoSizeDisk(long);
	long GetInfoSizeMem();
	void SetInfoSizeMem(long);
	CString GetInfoCompress();
	void SetInfoCompress(LPCTSTR);
	BOOL GetRubberBandVisible();
	void SetRubberBandVisible(BOOL);
	float GetRubberBandLeft();
	void SetRubberBandLeft(float);
	float GetRubberBandTop();
	void SetRubberBandTop(float);
	float GetRubberBandWidth();
	void SetRubberBandWidth(float);
	float GetRubberBandHeight();
	void SetRubberBandHeight(float);
	short GetMousePointer();
	void SetMousePointer(short);
	CPicture GetMouseIcon();
	void SetMouseIcon(LPDISPATCH);
	short GetScaleMode();
	void SetScaleMode(short);
	BOOL GetAutoSetRects();
	void SetAutoSetRects(BOOL);
	float GetScaleLeft();
	void SetScaleLeft(float);
	float GetScaleTop();
	void SetScaleTop(float);
	float GetScaleWidth();
	void SetScaleWidth(float);
	float GetScaleHeight();
	void SetScaleHeight(float);
	BOOL GetForePalette();
	void SetForePalette(BOOL);

// Operations
public:
	short Contrast(short iChange);
	short Flip();
	short Grayscale();
	short Intensity(short iChange);
	short Invert();
	short TwainAcquire(long hWnd);
	short TwainSelect(long hWnd);
	short Reverse();
	short ForceRepaint();
	short Save(LPCTSTR pszName, short iFormat, short iBitsPerPixel, short iQuality, BOOL bMultiPage);
	short Rotate(long iAngle, BOOL bResize, unsigned long crFill);
	short Fill(unsigned long crFill);
	short CreateBitmap(float fWidth, float fHeight, short iBitsPerPixel);
	short Render(long hDC, float fLeft, float fTop, float fWidth, float fHeight);
	long GetBitmapDC();
	short ReleaseBitmapDC();
	short Halftone(short iType, long iAngle);
	short Size(float fWidth, float fHeight, short iFlags);
	short Copy(short iFlags);
	short Paste(short iFlags);
	short Load(LPCTSTR pszName, short iBitsPerPixel, short iPage);
	short ColorRes(short iBitsPerPixel, short iPalette, short iDither, short iColors);
	short SetDstRect(float fLeft, float fTop, float fWidth, float fHeight);
	short SetDstClipRect(float fLeft, float fTop, float fWidth, float fHeight);
	short SetSrcRect(float fLeft, float fTop, float fWidth, float fHeight);
	short SetSrcClipRect(float fLeft, float fTop, float fWidth, float fHeight);
	short Trim(float fLeft, float fTop, float fWidth, float fHeight);
	short GetFileInfo(LPCTSTR pszName, short iPage);
	void SetRubberBandRect(float fLeft, float fTop, float fWidth, float fHeight);
	long GetClientDC();
	short ReleaseClientDC();
	long GetPalette(long hDC);
	unsigned long GetBitmapPalette(short iIndex);
	void SetBitmapPalette(short iIndex, unsigned long newValue);
	unsigned long GetUserPalette(short iIndex);
	void SetUserPalette(short iIndex, unsigned long newValue);
	long PrintStart();
	void PrintEnd(long hDC);
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Developer Studio will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_LEAD_H__BA0EE530_E514_11D1_A2B6_0000B4810C13__INCLUDED_)
