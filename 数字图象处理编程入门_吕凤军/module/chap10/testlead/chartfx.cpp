// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "chartfx.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"

/////////////////////////////////////////////////////////////////////////////
// CChartfx

IMPLEMENT_DYNCREATE(CChartfx, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CChartfx properties

short CChartfx::GetDesignDraw()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetDesignDraw(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

short CChartfx::GetThisSerie()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetThisSerie(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

short CChartfx::GetThisPoint()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetThisPoint(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

BOOL CChartfx::GetAutoInvalidate()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CChartfx::SetAutoInvalidate(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

long CChartfx::GetType()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetType(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

long CChartfx::GetStyle()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetStyle(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

short CChartfx::GetNSeries()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetNSeries(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

short CChartfx::GetNValues()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetNValues(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

unsigned long CChartfx::GetThisColor()
{
	unsigned long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetThisColor(unsigned long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

unsigned long CChartfx::GetThisBkColor()
{
	unsigned long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetThisBkColor(unsigned long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

short CChartfx::GetLeftGap()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetLeftGap(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

short CChartfx::GetRightGap()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetRightGap(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

short CChartfx::GetTopGap()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetTopGap(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

short CChartfx::GetBottomGap()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetBottomGap(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

short CChartfx::GetDecimals()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetDecimals(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

short CChartfx::GetPointType()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetPointType(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

short CChartfx::GetScheme()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetScheme(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

short CChartfx::GetStacked()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetStacked(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

short CChartfx::GetGrid()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetGrid(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}

short CChartfx::GetWallWidth()
{
	short result;
	GetProperty(0x14, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetWallWidth(short propVal)
{
	SetProperty(0x14, VT_I2, propVal);
}

short CChartfx::GetBarHorzGap()
{
	short result;
	GetProperty(0x15, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetBarHorzGap(short propVal)
{
	SetProperty(0x15, VT_I2, propVal);
}

BOOL CChartfx::GetView3D()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CChartfx::SetView3D(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

long CChartfx::GetAngles3D()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetAngles3D(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

short CChartfx::GetPixFactor()
{
	short result;
	GetProperty(0x18, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetPixFactor(short propVal)
{
	SetProperty(0x18, VT_I2, propVal);
}

short CChartfx::GetLineWidth()
{
	short result;
	GetProperty(0x19, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetLineWidth(short propVal)
{
	SetProperty(0x19, VT_I2, propVal);
}

short CChartfx::GetLineStyle()
{
	short result;
	GetProperty(0x1a, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetLineStyle(short propVal)
{
	SetProperty(0x1a, VT_I2, propVal);
}

unsigned long CChartfx::GetLineColor()
{
	unsigned long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetLineColor(unsigned long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

unsigned long CChartfx::GetLineBkColor()
{
	unsigned long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetLineBkColor(unsigned long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

short CChartfx::GetFixedWidth()
{
	short result;
	GetProperty(0x1d, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetFixedWidth(short propVal)
{
	SetProperty(0x1d, VT_I2, propVal);
}

short CChartfx::GetFixedStyle()
{
	short result;
	GetProperty(0x1e, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetFixedStyle(short propVal)
{
	SetProperty(0x1e, VT_I2, propVal);
}

unsigned long CChartfx::GetFixedColor()
{
	unsigned long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetFixedColor(unsigned long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

unsigned long CChartfx::GetFixedBkColor()
{
	unsigned long result;
	GetProperty(0x20, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetFixedBkColor(unsigned long propVal)
{
	SetProperty(0x20, VT_I4, propVal);
}

short CChartfx::GetFixedGap()
{
	short result;
	GetProperty(0x21, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetFixedGap(short propVal)
{
	SetProperty(0x21, VT_I2, propVal);
}

unsigned long CChartfx::GetRGBBarHorz()
{
	unsigned long result;
	GetProperty(0x22, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetRGBBarHorz(unsigned long propVal)
{
	SetProperty(0x22, VT_I4, propVal);
}

unsigned long CChartfx::GetRGBBk()
{
	unsigned long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetRGBBk(unsigned long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}

unsigned long CChartfx::GetRGB2DBk()
{
	unsigned long result;
	GetProperty(0x24, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetRGB2DBk(unsigned long propVal)
{
	SetProperty(0x24, VT_I4, propVal);
}

unsigned long CChartfx::GetRGB3DBk()
{
	unsigned long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetRGB3DBk(unsigned long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}

BOOL CChartfx::GetShowStatus()
{
	BOOL result;
	GetProperty(0x26, VT_BOOL, (void*)&result);
	return result;
}

void CChartfx::SetShowStatus(BOOL propVal)
{
	SetProperty(0x26, VT_BOOL, propVal);
}

CString CChartfx::GetHText()
{
	CString result;
	GetProperty(0x27, VT_BSTR, (void*)&result);
	return result;
}

void CChartfx::SetHText(LPCTSTR propVal)
{
	SetProperty(0x27, VT_BSTR, propVal);
}

short CChartfx::GetChartStatus()
{
	short result;
	GetProperty(0x28, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetChartStatus(short propVal)
{
	SetProperty(0x28, VT_I2, propVal);
}

short CChartfx::GetEdit()
{
	short result;
	GetProperty(0x29, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetEdit(short propVal)
{
	SetProperty(0x29, VT_I2, propVal);
}

short CChartfx::GetChartType()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetChartType(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}

BOOL CChartfx::GetChart3D()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}

void CChartfx::SetChart3D(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}

BOOL CChartfx::GetToolBar()
{
	BOOL result;
	GetProperty(0x2c, VT_BOOL, (void*)&result);
	return result;
}

void CChartfx::SetToolBar(BOOL propVal)
{
	SetProperty(0x2c, VT_BOOL, propVal);
}

BOOL CChartfx::GetPaletteBar()
{
	BOOL result;
	GetProperty(0x2d, VT_BOOL, (void*)&result);
	return result;
}

void CChartfx::SetPaletteBar(BOOL propVal)
{
	SetProperty(0x2d, VT_BOOL, propVal);
}

BOOL CChartfx::GetPatternBar()
{
	BOOL result;
	GetProperty(0x2e, VT_BOOL, (void*)&result);
	return result;
}

void CChartfx::SetPatternBar(BOOL propVal)
{
	SetProperty(0x2e, VT_BOOL, propVal);
}

long CChartfx::GetCustTool()
{
	long result;
	GetProperty(0x2f, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetCustTool(long propVal)
{
	SetProperty(0x2f, VT_I4, propVal);
}

long CChartfx::GetReturnValue()
{
	long result;
	GetProperty(0x30, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetReturnValue(long propVal)
{
	SetProperty(0x30, VT_I4, propVal);
}

BOOL CChartfx::GetAutoIncrement()
{
	BOOL result;
	GetProperty(0x31, VT_BOOL, (void*)&result);
	return result;
}

void CChartfx::SetAutoIncrement(BOOL propVal)
{
	SetProperty(0x31, VT_BOOL, propVal);
}

double CChartfx::GetThisValue()
{
	double result;
	GetProperty(0x32, VT_R8, (void*)&result);
	return result;
}

void CChartfx::SetThisValue(double propVal)
{
	SetProperty(0x32, VT_R8, propVal);
}

short CChartfx::GetVertGridGap()
{
	short result;
	GetProperty(0x33, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetVertGridGap(short propVal)
{
	SetProperty(0x33, VT_I2, propVal);
}

short CChartfx::GetXLegType()
{
	short result;
	GetProperty(0x34, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetXLegType(short propVal)
{
	SetProperty(0x34, VT_I2, propVal);
}

short CChartfx::GetConstType()
{
	short result;
	GetProperty(0x35, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetConstType(short propVal)
{
	SetProperty(0x35, VT_I2, propVal);
}

COleFont CChartfx::GetLeftFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x36, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CChartfx::SetLeftFont(LPDISPATCH propVal)
{
	SetProperty(0x36, VT_DISPATCH, propVal);
}

COleFont CChartfx::GetRightFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x37, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CChartfx::SetRightFont(LPDISPATCH propVal)
{
	SetProperty(0x37, VT_DISPATCH, propVal);
}

COleFont CChartfx::GetTopFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x38, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CChartfx::SetTopFont(LPDISPATCH propVal)
{
	SetProperty(0x38, VT_DISPATCH, propVal);
}

COleFont CChartfx::GetBottomFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x39, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CChartfx::SetBottomFont(LPDISPATCH propVal)
{
	SetProperty(0x39, VT_DISPATCH, propVal);
}

COleFont CChartfx::GetXLegFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x3a, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CChartfx::SetXLegFont(LPDISPATCH propVal)
{
	SetProperty(0x3a, VT_DISPATCH, propVal);
}

COleFont CChartfx::GetYLegFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x3b, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CChartfx::SetYLegFont(LPDISPATCH propVal)
{
	SetProperty(0x3b, VT_DISPATCH, propVal);
}

COleFont CChartfx::GetFixedFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x3c, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CChartfx::SetFixedFont(LPDISPATCH propVal)
{
	SetProperty(0x3c, VT_DISPATCH, propVal);
}

COleFont CChartfx::GetLegendFont()
{
	LPDISPATCH pDispatch;
	GetProperty(0x3d, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CChartfx::SetLegendFont(LPDISPATCH propVal)
{
	SetProperty(0x3d, VT_DISPATCH, propVal);
}

short CChartfx::GetLegendWidth()
{
	short result;
	GetProperty(0x3e, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetLegendWidth(short propVal)
{
	SetProperty(0x3e, VT_I2, propVal);
}

BOOL CChartfx::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CChartfx::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

OLE_HANDLE CChartfx::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

short CChartfx::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CChartfx::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

long CChartfx::GetHCtlWnd()
{
	long result;
	GetProperty(0x3f, VT_I4, (void*)&result);
	return result;
}

void CChartfx::SetHCtlWnd(long propVal)
{
	SetProperty(0x3f, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CChartfx operations

double CChartfx::GetValue(short index)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x52, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetValue(short index, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x52, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, newValue);
}

double CChartfx::GetXValue(short index)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x53, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetXValue(short index, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x53, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, newValue);
}

double CChartfx::GetIniValue(short index)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x54, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetIniValue(short index, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x54, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, newValue);
}

double CChartfx::GetConst(short index)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x55, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetConst(short index, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x55, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, newValue);
}

unsigned long CChartfx::GetColor(short index)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x56, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetColor(short index, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x56, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, newValue);
}

unsigned long CChartfx::GetBkColor(short index)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x57, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetBkColor(short index, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x57, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, newValue);
}

double CChartfx::GetAdm(short index)
{
	double result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x58, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetAdm(short index, double newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x58, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, newValue);
}

short CChartfx::GetPattern(short index)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x59, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetPattern(short index, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x59, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

long CChartfx::GetFonts(short index)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetFonts(short index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x5a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

CString CChartfx::GetTitle(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetTitle(short index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x5b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

CString CChartfx::GetLegend(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetLegend(short index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x5c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

CString CChartfx::GetSerLeg(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetSerLeg(short index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x5d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

CString CChartfx::GetKeyLeg(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetKeyLeg(short index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x5e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

CString CChartfx::GetFixLeg(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetFixLeg(short index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x5f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

CString CChartfx::GetYLeg(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x60, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetYLeg(short index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x60, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

CString CChartfx::GetKeySer(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x61, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetKeySer(short index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x61, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

CString CChartfx::GetStatusText(short index)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x62, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetStatusText(short index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x62, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, lpszNewValue);
}

unsigned long CChartfx::GetRGBFont(short index)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x63, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetRGBFont(short index, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x63, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, newValue);
}

short CChartfx::GetHFont(short index)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetHFont(short index, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x64, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

short CChartfx::GetItemWidth(short index)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetItemWidth(short index, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

short CChartfx::GetItemStyle(short index)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetItemStyle(short index, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

unsigned long CChartfx::GetItemColor(short index)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetItemColor(short index, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, newValue);
}

short CChartfx::GetDecimalsNum(short index)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		index);
	return result;
}

void CChartfx::SetDecimalsNum(short index, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

long CChartfx::OpenDataEx(short nType, long n1, long n2)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nType, n1, n2);
	return result;
}

BOOL CChartfx::CloseData(short nType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nType);
	return result;
}

long CChartfx::DblClk(short nType, long lExtra)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nType, lExtra);
	return result;
}

long CChartfx::RigClk(short nType, long lExtra)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nType, lExtra);
	return result;
}

long CChartfx::Status(short nItems, long lpStatus)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nItems, lpStatus);
	return result;
}

long CChartfx::ShowDialog(short nDialog, long lExtra)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nDialog, lExtra);
	return result;
}

long CChartfx::PrintIt()
{
	long result;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CChartfx::Scroll(long wParam, long lParam)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		wParam, lParam);
	return result;
}

long CChartfx::SetStatusItem(short index, BOOL bText, short nID, BOOL bFrame, short nWidth, short nMin, short nDesp, long dwStyle)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_I2 VTS_BOOL VTS_I2 VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, bText, nID, bFrame, nWidth, nMin, nDesp, dwStyle);
	return result;
}

long CChartfx::Paint(long hDC, short nLeft, short nTop, short nRight, short nBottom, short wAction, long lps)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC, nLeft, nTop, nRight, nBottom, wAction, lps);
	return result;
}

long CChartfx::SetStripe(short index, double dMin, double dMax, unsigned long rgb)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_R8 VTS_R8 VTS_I4;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		index, dMin, dMax, rgb);
	return result;
}

long CChartfx::Language(LPCTSTR sResource)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		sResource);
	return result;
}

long CChartfx::ExportFile(LPCTSTR lpszNewValue)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpszNewValue);
	return result;
}

long CChartfx::ImportFile(LPCTSTR lpszNewValue)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpszNewValue);
	return result;
}

long CChartfx::WriteTemplate(LPCTSTR lpszNewValue)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpszNewValue);
	return result;
}

long CChartfx::ReadTemplate(LPCTSTR lpszNewValue)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpszNewValue);
	return result;
}

long CChartfx::CopyData()
{
	long result;
	InvokeHelper(0x50, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CChartfx::CopyBitmap()
{
	long result;
	InvokeHelper(0x51, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CChartfx::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CChartfx::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
