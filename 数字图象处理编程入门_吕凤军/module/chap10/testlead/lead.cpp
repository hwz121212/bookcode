// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "lead.h"

// Dispatch interfaces referenced by this interface
#include "Picture.h"

/////////////////////////////////////////////////////////////////////////////
// CLead

IMPLEMENT_DYNCREATE(CLead, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLead properties

OLE_HANDLE CLead::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CLead::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

OLE_COLOR CLead::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CLead::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

BOOL CLead::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

short CLead::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

long CLead::GetBitmap()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CLead::SetBitmap(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

BOOL CLead::GetAutoRepaint()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAutoRepaint(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CLead::GetBackErase()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetBackErase(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CLead::GetAutoScroll()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAutoScroll(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

short CLead::GetPaintDither()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintDither(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

float CLead::GetBitmapWidth()
{
	float result;
	GetProperty(0x6, VT_R4, (void*)&result);
	return result;
}

void CLead::SetBitmapWidth(float propVal)
{
	SetProperty(0x6, VT_R4, propVal);
}

float CLead::GetBitmapHeight()
{
	float result;
	GetProperty(0x7, VT_R4, (void*)&result);
	return result;
}

void CLead::SetBitmapHeight(float propVal)
{
	SetProperty(0x7, VT_R4, propVal);
}

short CLead::GetBitmapBits()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBitmapBits(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

short CLead::GetVersionLevel()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CLead::SetVersionLevel(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

short CLead::GetVersionMajor()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CLead::SetVersionMajor(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CLead::GetVersionMinor()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CLead::SetVersionMinor(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

CString CLead::GetVersionProduct()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetVersionProduct(LPCTSTR propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}

CString CLead::GetVersionDate()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetVersionDate(LPCTSTR propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}

CString CLead::GetVersionTime()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetVersionTime(LPCTSTR propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}

short CLead::GetPaintPalette()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CLead::SetPaintPalette(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

BOOL CLead::GetEnableMethodErrors()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetEnableMethodErrors(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

float CLead::GetDstLeft()
{
	float result;
	GetProperty(0x11, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstLeft(float propVal)
{
	SetProperty(0x11, VT_R4, propVal);
}

float CLead::GetDstTop()
{
	float result;
	GetProperty(0x12, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstTop(float propVal)
{
	SetProperty(0x12, VT_R4, propVal);
}

float CLead::GetDstWidth()
{
	float result;
	GetProperty(0x13, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstWidth(float propVal)
{
	SetProperty(0x13, VT_R4, propVal);
}

float CLead::GetDstHeight()
{
	float result;
	GetProperty(0x14, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstHeight(float propVal)
{
	SetProperty(0x14, VT_R4, propVal);
}

float CLead::GetDstClipLeft()
{
	float result;
	GetProperty(0x15, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstClipLeft(float propVal)
{
	SetProperty(0x15, VT_R4, propVal);
}

float CLead::GetDstClipTop()
{
	float result;
	GetProperty(0x16, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstClipTop(float propVal)
{
	SetProperty(0x16, VT_R4, propVal);
}

float CLead::GetDstClipWidth()
{
	float result;
	GetProperty(0x17, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstClipWidth(float propVal)
{
	SetProperty(0x17, VT_R4, propVal);
}

float CLead::GetDstClipHeight()
{
	float result;
	GetProperty(0x18, VT_R4, (void*)&result);
	return result;
}

void CLead::SetDstClipHeight(float propVal)
{
	SetProperty(0x18, VT_R4, propVal);
}

float CLead::GetSrcLeft()
{
	float result;
	GetProperty(0x19, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcLeft(float propVal)
{
	SetProperty(0x19, VT_R4, propVal);
}

float CLead::GetSrcTop()
{
	float result;
	GetProperty(0x1a, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcTop(float propVal)
{
	SetProperty(0x1a, VT_R4, propVal);
}

float CLead::GetSrcWidth()
{
	float result;
	GetProperty(0x1b, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcWidth(float propVal)
{
	SetProperty(0x1b, VT_R4, propVal);
}

float CLead::GetSrcHeight()
{
	float result;
	GetProperty(0x1c, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcHeight(float propVal)
{
	SetProperty(0x1c, VT_R4, propVal);
}

float CLead::GetSrcClipLeft()
{
	float result;
	GetProperty(0x1d, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcClipLeft(float propVal)
{
	SetProperty(0x1d, VT_R4, propVal);
}

float CLead::GetSrcClipTop()
{
	float result;
	GetProperty(0x1e, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcClipTop(float propVal)
{
	SetProperty(0x1e, VT_R4, propVal);
}

float CLead::GetSrcClipWidth()
{
	float result;
	GetProperty(0x1f, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcClipWidth(float propVal)
{
	SetProperty(0x1f, VT_R4, propVal);
}

float CLead::GetSrcClipHeight()
{
	float result;
	GetProperty(0x20, VT_R4, (void*)&result);
	return result;
}

void CLead::SetSrcClipHeight(float propVal)
{
	SetProperty(0x20, VT_R4, propVal);
}

short CLead::GetBitmapXRes()
{
	short result;
	GetProperty(0x21, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBitmapXRes(short propVal)
{
	SetProperty(0x21, VT_I2, propVal);
}

short CLead::GetBitmapYRes()
{
	short result;
	GetProperty(0x22, VT_I2, (void*)&result);
	return result;
}

void CLead::SetBitmapYRes(short propVal)
{
	SetProperty(0x22, VT_I2, propVal);
}

short CLead::GetInfoPage()
{
	short result;
	GetProperty(0x23, VT_I2, (void*)&result);
	return result;
}

void CLead::SetInfoPage(short propVal)
{
	SetProperty(0x23, VT_I2, propVal);
}

float CLead::GetInfoWidth()
{
	float result;
	GetProperty(0x24, VT_R4, (void*)&result);
	return result;
}

void CLead::SetInfoWidth(float propVal)
{
	SetProperty(0x24, VT_R4, propVal);
}

float CLead::GetInfoHeight()
{
	float result;
	GetProperty(0x25, VT_R4, (void*)&result);
	return result;
}

void CLead::SetInfoHeight(float propVal)
{
	SetProperty(0x25, VT_R4, propVal);
}

short CLead::GetInfoBits()
{
	short result;
	GetProperty(0x26, VT_I2, (void*)&result);
	return result;
}

void CLead::SetInfoBits(short propVal)
{
	SetProperty(0x26, VT_I2, propVal);
}

short CLead::GetInfoFormat()
{
	short result;
	GetProperty(0x27, VT_I2, (void*)&result);
	return result;
}

void CLead::SetInfoFormat(short propVal)
{
	SetProperty(0x27, VT_I2, propVal);
}

long CLead::GetInfoSizeDisk()
{
	long result;
	GetProperty(0x28, VT_I4, (void*)&result);
	return result;
}

void CLead::SetInfoSizeDisk(long propVal)
{
	SetProperty(0x28, VT_I4, propVal);
}

long CLead::GetInfoSizeMem()
{
	long result;
	GetProperty(0x29, VT_I4, (void*)&result);
	return result;
}

void CLead::SetInfoSizeMem(long propVal)
{
	SetProperty(0x29, VT_I4, propVal);
}

CString CLead::GetInfoCompress()
{
	CString result;
	GetProperty(0x2a, VT_BSTR, (void*)&result);
	return result;
}

void CLead::SetInfoCompress(LPCTSTR propVal)
{
	SetProperty(0x2a, VT_BSTR, propVal);
}

BOOL CLead::GetRubberBandVisible()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetRubberBandVisible(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}

float CLead::GetRubberBandLeft()
{
	float result;
	GetProperty(0x2c, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRubberBandLeft(float propVal)
{
	SetProperty(0x2c, VT_R4, propVal);
}

float CLead::GetRubberBandTop()
{
	float result;
	GetProperty(0x2d, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRubberBandTop(float propVal)
{
	SetProperty(0x2d, VT_R4, propVal);
}

float CLead::GetRubberBandWidth()
{
	float result;
	GetProperty(0x2e, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRubberBandWidth(float propVal)
{
	SetProperty(0x2e, VT_R4, propVal);
}

float CLead::GetRubberBandHeight()
{
	float result;
	GetProperty(0x2f, VT_R4, (void*)&result);
	return result;
}

void CLead::SetRubberBandHeight(float propVal)
{
	SetProperty(0x2f, VT_R4, propVal);
}

short CLead::GetMousePointer()
{
	short result;
	GetProperty(0x30, VT_I2, (void*)&result);
	return result;
}

void CLead::SetMousePointer(short propVal)
{
	SetProperty(0x30, VT_I2, propVal);
}

CPicture CLead::GetMouseIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0x31, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLead::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x31, VT_DISPATCH, propVal);
}

short CLead::GetScaleMode()
{
	short result;
	GetProperty(0x32, VT_I2, (void*)&result);
	return result;
}

void CLead::SetScaleMode(short propVal)
{
	SetProperty(0x32, VT_I2, propVal);
}

BOOL CLead::GetAutoSetRects()
{
	BOOL result;
	GetProperty(0x33, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetAutoSetRects(BOOL propVal)
{
	SetProperty(0x33, VT_BOOL, propVal);
}

float CLead::GetScaleLeft()
{
	float result;
	GetProperty(0x34, VT_R4, (void*)&result);
	return result;
}

void CLead::SetScaleLeft(float propVal)
{
	SetProperty(0x34, VT_R4, propVal);
}

float CLead::GetScaleTop()
{
	float result;
	GetProperty(0x35, VT_R4, (void*)&result);
	return result;
}

void CLead::SetScaleTop(float propVal)
{
	SetProperty(0x35, VT_R4, propVal);
}

float CLead::GetScaleWidth()
{
	float result;
	GetProperty(0x36, VT_R4, (void*)&result);
	return result;
}

void CLead::SetScaleWidth(float propVal)
{
	SetProperty(0x36, VT_R4, propVal);
}

float CLead::GetScaleHeight()
{
	float result;
	GetProperty(0x37, VT_R4, (void*)&result);
	return result;
}

void CLead::SetScaleHeight(float propVal)
{
	SetProperty(0x37, VT_R4, propVal);
}

BOOL CLead::GetForePalette()
{
	BOOL result;
	GetProperty(0x38, VT_BOOL, (void*)&result);
	return result;
}

void CLead::SetForePalette(BOOL propVal)
{
	SetProperty(0x38, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CLead operations

short CLead::Contrast(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLead::Flip()
{
	short result;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::Grayscale()
{
	short result;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::Intensity(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLead::Invert()
{
	short result;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::TwainAcquire(long hWnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hWnd);
	return result;
}

short CLead::TwainSelect(long hWnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hWnd);
	return result;
}

short CLead::Reverse()
{
	short result;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::ForceRepaint()
{
	short result;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::Save(LPCTSTR pszName, short iFormat, short iBitsPerPixel, short iQuality, BOOL bMultiPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iFormat, iBitsPerPixel, iQuality, bMultiPage);
	return result;
}

short CLead::Rotate(long iAngle, BOOL bResize, unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_I4;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle, bResize, crFill);
	return result;
}

short CLead::Fill(unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crFill);
	return result;
}

short CLead::CreateBitmap(float fWidth, float fHeight, short iBitsPerPixel)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, iBitsPerPixel);
	return result;
}

short CLead::Render(long hDC, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, fLeft, fTop, fWidth, fHeight);
	return result;
}

long CLead::GetBitmapDC()
{
	long result;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLead::ReleaseBitmapDC()
{
	short result;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLead::Halftone(short iType, long iAngle)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iType, iAngle);
	return result;
}

short CLead::Size(float fWidth, float fHeight, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, iFlags);
	return result;
}

short CLead::Copy(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLead::Paste(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLead::Load(LPCTSTR pszName, short iBitsPerPixel, short iPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iBitsPerPixel, iPage);
	return result;
}

short CLead::ColorRes(short iBitsPerPixel, short iPalette, short iDither, short iColors)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel, iPalette, iDither, iColors);
	return result;
}

short CLead::SetDstRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x4f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::SetDstClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x50, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::SetSrcRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x51, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::SetSrcClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x52, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::Trim(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x53, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLead::GetFileInfo(LPCTSTR pszName, short iPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x54, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iPage);
	return result;
}

void CLead::SetRubberBandRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x55, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fLeft, fTop, fWidth, fHeight);
}

long CLead::GetClientDC()
{
	long result;
	InvokeHelper(0x56, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLead::ReleaseClientDC()
{
	short result;
	InvokeHelper(0x57, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CLead::GetPalette(long hDC)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x58, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC);
	return result;
}

unsigned long CLead::GetBitmapPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetBitmapPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x5b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

unsigned long CLead::GetUserPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLead::SetUserPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x5c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

long CLead::PrintStart()
{
	long result;
	InvokeHelper(0x59, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CLead::PrintEnd(long hDC)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hDC);
}

void CLead::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
